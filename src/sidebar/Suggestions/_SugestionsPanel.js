import React from 'react';
import { SuggestionList } from './SuggestionList';

const BlockAttributes = {
    'core/paragraph': ['content'],
    'core/pullquote': ['citation', 'value'],
    // 'core/heading': ['content'],
    'core/list': ['values'],
    'core/image': ['caption'],
    'core/quote': ['value', 'citation'],
    // 'core/gallery': ['caption'], // problem
    'core/audio': ['caption'],
    'core/preformatted': ['content'],
    // 'core/table': [], // problem
    'core/verse': ['content']
}

export class SuggestionsPanel extends React.Component {
    constructor(props) {
        super(props);
        
        this.state = {
            suggestions: [],
            item: {}
        };
        this.closePanel = this.closePanel.bind(this);
    }

    searchSuggestions (rawItemData) {
        const keywords = rawItemData.split(" ");
        const blocks = wp.data.select('core/block-editor').getBlocks();

        /* 
        –ú—ã—Å–ª—è
        –§—Ä–∞–∑—ã –Ω–µ –∏—â–µ–º, –∏—â–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞.
        –ü–æ–º–µ—á–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∂–∏—Ä–Ω—ã–º –≤ –Ω–∞—à–µ–π –ø–∞–Ω–µ–ª–∏.
        –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–ª–æ–∫–µ, —Ç–µ–º –≤—ã—à–µ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å.

        –ù–∞ –ø–∞–Ω–µ–ª–∏ –∏–º–µ–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ –≤ —Å—Ç–∞—Ç—å–µ —á—Ç–æ-—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–æ. (—Å–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫)
        */
        let interestiongBlocks = [];

        for (const block of blocks) {
            let content = "";
            let blockRating = 0;
            let found = [];
            if (BlockAttributes[block.name] !== undefined) {
                try {
                    content = this.getBlockContent(block);
                } catch (e) {
                    content = '';
                }
                for (const word of keywords) {
                    let index = content.toLowerCase().indexOf(word.toLowerCase());
                    if (index === undefined) index = -1;
                    while (index !== -1) {
                        found.push(this.getTextCut(content, word, index));
                        blockRating++;

                        index = content.toLowerCase().indexOf(word.toLowerCase(), index+1);
                    }

                }
                if (found.length > 0) {
                    interestiongBlocks.push({
                        clientId: block.clientId,
                        blockName: block.name,
                        blockRating: blockRating,
                        found: found
                    });
                } 
            }
        }
        if (interestiongBlocks.length > 0) {

            console.log(interestiongBlocks);
            return interestiongBlocks;
        } else {
            console.log(`–ü–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ –±—É–¥–µ—Ç`)
            return false;
        }
    }

    getBlockContent(block) {
        let content = "";
        // const attrs = BlockAttributes[block.name];

        // for (const attr of attrs) {
        //     content += block.attributes[attr];
        // }

        content = block.originalContent;
        content = content.replace(/(<([^>]+)>)/ig,"");

        return content;
    }

    getTextCut(content, word, index) {
        return {
            before: content.slice(index-20, index),
            word: content.slice(index, index+word.length),
            after: content.slice(index+word.length, index+word.length+20)
        }
    }

    componentDidMount() {
        const {suggestionsData} = this.props;

        console.log("Raw Suggestions");
        console.log(suggestionsData.rawKeywords);
        
        console.log("Repared Suggestions");
        if (suggestionsData.rawKeywords) {

            const newState = this.searchSuggestions(suggestionsData.rawKeywords);
            if (newState)
                this.setState({
                    suggestions: newState,
                    linkItem: suggestionsData.linkItem
                });
        }

    }

    componentWillUnmount() {
        // clean suggestions
    }

    closePanel() {
        // empty string will close it
        this.props.toggleSuggestionsPanel(false);
    }

    render () {
        
        
        const className = "suggestion-panel";
        return (
            <div className={className}>
                <button onClick={this.closePanel}>ü°∞ –ù–∞–∑–∞–¥</button>
                <SuggestionList data={this.state}/>
            </div>
        )
        
    }
}